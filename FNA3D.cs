// <auto-generated>
//  This code was generated by the following tool on 2022-07-13 00:32:10 GMT+00:00:
//      https://github.com/bottlenoselabs/c2cs (v3.2.8.0)
//      
//  Changes to this file may cause incorrect behavior and will be lost if the code is
//      regenerated. To extend or add functionality use a partial class in a new file.
// </auto-generated>
// ReSharper disable All

#nullable enable
#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static bottlenoselabs.FNA3D.Runtime;

namespace bottlenoselabs
{
    public static unsafe partial class FNA3D
    {
        private const string LibraryName = "FNA3D";

        #region API

        // Function @ FNA3D.h:941:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_AddDisposeTexture(FNA3D_Device* device, FNA3D_Texture* texture);

        // Function @ FNA3D.h:1008:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetTextureDataCube(FNA3D_Device* device, FNA3D_Texture* texture, int x, int y, int w, int h, FNA3D_CubeMapFace cubeMapFace, int level, void* data, int dataLength);

        // Function @ FNA3D_Image.h:73:19
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* FNA3D_Image_Load(FNA3D_Image_ReadFunc readFunc, FNA3D_Image_SkipFunc skipFunc, FNA3D_Image_EOFFunc eofFunc, void* context, int* w, int* h, int* len, int forceW, int forceH, byte zoom);

        // Function @ FNA3D.h:1033:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetTextureDataYUV(FNA3D_Device* device, FNA3D_Texture* y, FNA3D_Texture* u, FNA3D_Texture* v, int yWidth, int yHeight, int uvWidth, int uvHeight, void* data, int dataLength);

        // Function @ FNA3D.h:1285:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_AddDisposeIndexBuffer(FNA3D_Device* device, FNA3D_Buffer* buffer);

        // Function @ FNA3D.h:1298:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetIndexBufferData(FNA3D_Device* device, FNA3D_Buffer* buffer, int offsetInBytes, void* data, int dataLength, FNA3D_SetDataOptions options);

        // Function @ FNA3D.h:1509:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FNA3D_GetMaxMultiSampleCount(FNA3D_Device* device, FNA3D_SurfaceFormat format, int multiSampleCount);

        // Function @ FNA3D.h:1173:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_AddDisposeRenderbuffer(FNA3D_Device* device, FNA3D_Renderbuffer* renderbuffer);

        // Function @ FNA3D.h:1462:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte FNA3D_QueryComplete(FNA3D_Device* device, FNA3D_Query* query);

        // Function @ FNA3D.h:858:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_SurfaceFormat FNA3D_GetBackbufferSurfaceFormat(FNA3D_Device* device);

        // Function @ FNA3D.h:833:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_ReadBackbuffer(FNA3D_Device* device, int x, int y, int w, int h, void* data, int dataLength);

        // Function @ FNA3D.h:660:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetBlendFactor(FNA3D_Device* device, FNA3D_Color* blendFactor);

        // Function @ FNA3D.h:872:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FNA3D_GetBackbufferMultiSampleCount(FNA3D_Device* device);

        // Function @ FNA3D.h:1271:24
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Buffer* FNA3D_GenIndexBuffer(FNA3D_Device* device, byte dynamic, FNA3D_BufferUsage usage, int sizeInBytes);

        // Function @ FNA3D.h:805:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_ResolveTarget(FNA3D_Device* device, FNA3D_RenderTargetBinding* target);

        // Function @ FNA3D.h:926:25
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Texture* FNA3D_CreateTextureCube(FNA3D_Device* device, FNA3D_SurfaceFormat format, int size, int levelCount, byte isRenderTarget);

        // Function @ FNA3D.h:1392:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_ApplyEffect(FNA3D_Device* device, FNA3D_Effect* effect, uint pass, MOJOSHADER_effectStateChanges* stateChanges);

        // Function @ FNA3D.h:1440:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_AddDisposeQuery(FNA3D_Device* device, FNA3D_Query* query);

        // Function @ FNA3D_Image.h:90:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_Image_Free(byte* mem);

        // Function @ FNA3D.h:542:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SwapBuffers(FNA3D_Device* device, FNA3D_Rect* sourceRectangle, FNA3D_Rect* destinationRectangle, void* overrideWindowHandle);

        // Function @ FNA3D.h:1353:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_CloneEffect(FNA3D_Device* device, FNA3D_Effect* cloneSource, FNA3D_Effect** effect, MOJOSHADER_effect** effectData);

        // Function @ FNA3D.h:1490:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte FNA3D_SupportsNoOverwrite(FNA3D_Device* device);

        // Function @ FNA3D.h:770:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_ApplyVertexBufferBindings(FNA3D_Device* device, FNA3D_VertexBufferBinding* bindings, int numBindings, byte bindingsUpdated, int baseVertex);

        // Function @ FNA3D.h:1420:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_EndPassRestore(FNA3D_Device* device, FNA3D_Effect* effect);

        // Function @ FNA3D.h:720:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_ApplyRasterizerState(FNA3D_Device* device, FNA3D_RasterizerState* rasterizerState);

        // Function @ FNA3D_Image.h:131:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_Image_SaveJPG(FNA3D_Image_WriteFunc writeFunc, void* context, int srcW, int srcH, int dstW, int dstH, byte* data, int quality);

        // Function @ FNA3D.h:1203:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_AddDisposeVertexBuffer(FNA3D_Device* device, FNA3D_Buffer* buffer);

        // Function @ FNA3D.h:1481:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte FNA3D_SupportsS3TC(FNA3D_Device* device);

        // Function @ FNA3D.h:1478:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte FNA3D_SupportsDXT1(FNA3D_Device* device);

        // Function @ FNA3D.h:1224:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetVertexBufferData(FNA3D_Device* device, FNA3D_Buffer* buffer, int offsetInBytes, void* data, int elementCount, int elementSizeInBytes, int vertexStride, FNA3D_SetDataOptions options);

        // Function @ FNA3D_Image.h:110:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_Image_SavePNG(FNA3D_Image_WriteFunc writeFunc, void* context, int srcW, int srcH, int dstW, int dstH, byte* data);

        // Function @ FNA3D.h:651:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetBlendFactor(FNA3D_Device* device, FNA3D_Color* blendFactor);

        // Function @ FNA3D.h:1470:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FNA3D_QueryPixelCount(FNA3D_Device* device, FNA3D_Query* query);

        // Function @ FNA3D.h:669:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FNA3D_GetMultiSampleMask(FNA3D_Device* device);

        // Function @ FNA3D.h:697:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetBlendState(FNA3D_Device* device, FNA3D_BlendState* blendState);

        // Function @ FNA3D.h:708:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetDepthStencilState(FNA3D_Device* device, FNA3D_DepthStencilState* depthStencilState);

        // Function @ FNA3D.h:982:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetTextureData3D(FNA3D_Device* device, FNA3D_Texture* texture, int x, int y, int z, int w, int h, int d, int level, void* data, int dataLength);

        // Function @ FNA3D.h:1115:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetTextureDataCube(FNA3D_Device* device, FNA3D_Texture* texture, int x, int y, int w, int h, FNA3D_CubeMapFace cubeMapFace, int level, void* data, int dataLength);

        // Function @ FNA3D.h:675:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetMultiSampleMask(FNA3D_Device* device, int mask);

        // Function @ FNA3D.h:817:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_ResetBackbuffer(FNA3D_Device* device, FNA3D_PresentationParameters* presentationParameters);

        // Function @ FNA3D.h:578:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_DrawIndexedPrimitives(FNA3D_Device* device, FNA3D_PrimitiveType primitiveType, int baseVertex, int minVertexIndex, int numVertices, int startIndex, int primitiveCount, FNA3D_Buffer* indices, FNA3D_IndexElementSize indexElementSize);

        // Function @ FNA3D.h:490:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_HookLogFunctions(FNA3D_LogFunc info, FNA3D_LogFunc warn, FNA3D_LogFunc error);

        // Function @ FNA3D.h:1522:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetStringMarker(FNA3D_Device* device, CString text);

        // Function @ FNA3D.h:1493:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte FNA3D_SupportsSRGBRenderTargets(FNA3D_Device* device);

        // Function @ FNA3D.h:681:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FNA3D_GetReferenceStencil(FNA3D_Device* device);

        // Function @ FNA3D.h:1377:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetEffectTechnique(FNA3D_Device* device, FNA3D_Effect* effect, MOJOSHADER_effectTechnique* technique);

        // Function @ FNA3D.h:532:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_DestroyDevice(FNA3D_Device* device);

        // Function @ FNA3D.h:636:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetViewport(FNA3D_Device* device, FNA3D_Viewport* viewport);

        // Function @ FNA3D.h:1496:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetMaxTextureSlots(FNA3D_Device* device, int* textures, int* vertexTextures);

        // Function @ FNA3D.h:957:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetTextureData2D(FNA3D_Device* device, FNA3D_Texture* texture, int x, int y, int w, int h, int level, void* data, int dataLength);

        // Function @ FNA3D.h:748:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_VerifyVertexSampler(FNA3D_Device* device, int index, FNA3D_Texture* texture, FNA3D_SamplerState* sampler);

        // Function @ FNA3D.h:848:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetBackbufferSize(FNA3D_Device* device, int* w, int* h);

        // Function @ FNA3D.h:602:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_DrawInstancedPrimitives(FNA3D_Device* device, FNA3D_PrimitiveType primitiveType, int baseVertex, int minVertexIndex, int numVertices, int startIndex, int primitiveCount, int instanceCount, FNA3D_Buffer* indices, FNA3D_IndexElementSize indexElementSize);

        // Function @ FNA3D.h:1189:24
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Buffer* FNA3D_GenVertexBuffer(FNA3D_Device* device, byte dynamic, FNA3D_BufferUsage usage, int sizeInBytes);

        // Function @ FNA3D.h:907:25
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Texture* FNA3D_CreateTexture3D(FNA3D_Device* device, FNA3D_SurfaceFormat format, int width, int height, int depth, int levelCount);

        // Function @ FNA3D.h:476:19
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint FNA3D_LinkedVersion();

        // Function @ FNA3D.h:1454:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_QueryEnd(FNA3D_Device* device, FNA3D_Query* query);

        // Function @ FNA3D.h:1446:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_QueryBegin(FNA3D_Device* device, FNA3D_Query* query);

        // Function @ FNA3D.h:1367:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_AddDisposeEffect(FNA3D_Device* device, FNA3D_Effect* effect);

        // Function @ FNA3D.h:1250:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetVertexBufferData(FNA3D_Device* device, FNA3D_Buffer* buffer, int offsetInBytes, void* data, int elementCount, int elementSizeInBytes, int vertexStride);

        // Function @ FNA3D.h:866:28
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_DepthFormat FNA3D_GetBackbufferDepthFormat(FNA3D_Device* device);

        // Function @ FNA3D.h:515:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetDrawableSize(void* window, int* w, int* h);

        // Function @ FNA3D.h:559:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_Clear(FNA3D_Device* device, FNA3D_ClearOptions options, FNA3D_Vec4* color, float depth, int stencil);

        // Function @ FNA3D.h:1140:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Renderbuffer* FNA3D_GenColorRenderbuffer(FNA3D_Device* device, int width, int height, FNA3D_SurfaceFormat format, int multiSampleCount, FNA3D_Texture* texture);

        // Function @ FNA3D.h:887:25
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Texture* FNA3D_CreateTexture2D(FNA3D_Device* device, FNA3D_SurfaceFormat format, int width, int height, int levelCount, byte isRenderTarget);

        // Function @ FNA3D.h:1314:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetIndexBufferData(FNA3D_Device* device, FNA3D_Buffer* buffer, int offsetInBytes, void* data, int dataLength);

        // Function @ FNA3D.h:733:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_VerifySampler(FNA3D_Device* device, int index, FNA3D_Texture* texture, FNA3D_SamplerState* sampler);

        // Function @ FNA3D.h:1487:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte FNA3D_SupportsHardwareInstancing(FNA3D_Device* device);

        // Function @ FNA3D.h:1484:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte FNA3D_SupportsBC7(FNA3D_Device* device);

        // Function @ FNA3D.h:1339:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_CreateEffect(FNA3D_Device* device, byte* effectCode, uint effectCodeLength, FNA3D_Effect** effect, MOJOSHADER_effect** effectData);

        // Function @ FNA3D.h:687:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetReferenceStencil(FNA3D_Device* device, int @ref);

        // Function @ FNA3D.h:620:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_DrawPrimitives(FNA3D_Device* device, FNA3D_PrimitiveType primitiveType, int vertexStart, int primitiveCount);

        // Function @ FNA3D.h:503:19
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint FNA3D_PrepareWindowAttributes();

        // Function @ FNA3D.h:526:24
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Device* FNA3D_CreateDevice(FNA3D_PresentationParameters* presentationParameters, byte debugMode);

        // Function @ FNA3D.h:645:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetScissorRect(FNA3D_Device* device, FNA3D_Rect* scissor);

        // Function @ FNA3D.h:1086:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetTextureData3D(FNA3D_Device* device, FNA3D_Texture* texture, int x, int y, int z, int w, int h, int d, int level, void* data, int dataLength);

        // Function @ FNA3D.h:1059:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_GetTextureData2D(FNA3D_Device* device, FNA3D_Texture* texture, int x, int y, int w, int h, int level, void* data, int dataLength);

        // Function @ FNA3D.h:791:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_SetRenderTargets(FNA3D_Device* device, FNA3D_RenderTargetBinding* renderTargets, int numRenderTargets, FNA3D_Renderbuffer* depthStencilBuffer, FNA3D_DepthFormat depthFormat, byte preserveTargetContents);

        // Function @ FNA3D.h:1431:23
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Query* FNA3D_CreateQuery(FNA3D_Device* device);

        // Function @ FNA3D.h:1409:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FNA3D_BeginPassRestore(FNA3D_Device* device, FNA3D_Effect* effect, MOJOSHADER_effectStateChanges* stateChanges);

        // Function @ FNA3D.h:1158:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern FNA3D_Renderbuffer* FNA3D_GenDepthStencilRenderbuffer(FNA3D_Device* device, int width, int height, FNA3D_DepthFormat format, int multiSampleCount);

        #endregion

        #region Types

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CString_Int_Int
        {
            public delegate* unmanaged<void*, CString, int, int> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr_Int_Void
        {
            public delegate* unmanaged<void*, void*, int, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Int
        {
            public delegate* unmanaged<void*, int> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Int_Void
        {
            public delegate* unmanaged<void*, int, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_CString_Void
        {
            public delegate* unmanaged<CString, void> Pointer;
        }

        // Union @ FNA3D.h:435:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct FNA3D_RenderTargetBinding_ANONYMOUS_FIELD1
        {
            [FieldOffset(0)] // size = 8
            public FNA3D_RenderTargetBinding_ANONYMOUS_FIELD1_ANONYMOUS_FIELD0 twod;

            [FieldOffset(0)] // size = 8
            public FNA3D_RenderTargetBinding_ANONYMOUS_FIELD1_ANONYMOUS_FIELD1 cube;
        }

        // Struct @ FNA3D.h:437:3
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct FNA3D_RenderTargetBinding_ANONYMOUS_FIELD1_ANONYMOUS_FIELD0
        {
            [FieldOffset(0)] // size = 4
            public int width;

            [FieldOffset(4)] // size = 4
            public int height;
        }

        // Struct @ FNA3D.h:395:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct FNA3D_SamplerState
        {
            [FieldOffset(0)] // size = 4
            public FNA3D_TextureFilter filter;

            [FieldOffset(4)] // size = 4
            public FNA3D_TextureAddressMode addressU;

            [FieldOffset(8)] // size = 4
            public FNA3D_TextureAddressMode addressV;

            [FieldOffset(12)] // size = 4
            public FNA3D_TextureAddressMode addressW;

            [FieldOffset(16)] // size = 4
            public float mipMapLevelOfDetailBias;

            [FieldOffset(20)] // size = 4
            public int maxAnisotropy;

            [FieldOffset(24)] // size = 4
            public int maxMipLevel;
        }

        // Struct @ FNA3D.h:385:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct FNA3D_RasterizerState
        {
            [FieldOffset(0)] // size = 4
            public FNA3D_FillMode fillMode;

            [FieldOffset(4)] // size = 4
            public FNA3D_CullMode cullMode;

            [FieldOffset(8)] // size = 4
            public float depthBias;

            [FieldOffset(12)] // size = 4
            public float slopeScaleDepthBias;

            [FieldOffset(16)] // size = 1
            public byte scissorTestEnable;

            [FieldOffset(17)] // size = 1
            public byte multiSampleAntiAlias;
        }

        // Struct @ FNA3D.h:325:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
        public struct FNA3D_Viewport
        {
            [FieldOffset(0)] // size = 4
            public int x;

            [FieldOffset(4)] // size = 4
            public int y;

            [FieldOffset(8)] // size = 4
            public int w;

            [FieldOffset(12)] // size = 4
            public int h;

            [FieldOffset(16)] // size = 4
            public float minDepth;

            [FieldOffset(20)] // size = 4
            public float maxDepth;
        }

        // Struct @ FNA3D.h:365:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 60, Pack = 4)]
        public struct FNA3D_DepthStencilState
        {
            [FieldOffset(0)] // size = 1
            public byte depthBufferEnable;

            [FieldOffset(1)] // size = 1
            public byte depthBufferWriteEnable;

            [FieldOffset(4)] // size = 4
            public FNA3D_CompareFunction depthBufferFunction;

            [FieldOffset(8)] // size = 1
            public byte stencilEnable;

            [FieldOffset(12)] // size = 4
            public int stencilMask;

            [FieldOffset(16)] // size = 4
            public int stencilWriteMask;

            [FieldOffset(20)] // size = 1
            public byte twoSidedStencilMode;

            [FieldOffset(24)] // size = 4
            public FNA3D_StencilOperation stencilFail;

            [FieldOffset(28)] // size = 4
            public FNA3D_StencilOperation stencilDepthBufferFail;

            [FieldOffset(32)] // size = 4
            public FNA3D_StencilOperation stencilPass;

            [FieldOffset(36)] // size = 4
            public FNA3D_CompareFunction stencilFunction;

            [FieldOffset(40)] // size = 4
            public FNA3D_StencilOperation ccwStencilFail;

            [FieldOffset(44)] // size = 4
            public FNA3D_StencilOperation ccwStencilDepthBufferFail;

            [FieldOffset(48)] // size = 4
            public FNA3D_StencilOperation ccwStencilPass;

            [FieldOffset(52)] // size = 4
            public FNA3D_CompareFunction ccwStencilFunction;

            [FieldOffset(56)] // size = 4
            public int referenceStencil;
        }

        // Struct @ FNA3D.h:301:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
        public struct FNA3D_Color
        {
            [FieldOffset(0)] // size = 1
            public byte r;

            [FieldOffset(1)] // size = 1
            public byte g;

            [FieldOffset(2)] // size = 1
            public byte b;

            [FieldOffset(3)] // size = 1
            public byte a;
        }

        // Struct @ FNA3D.h:317:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct FNA3D_Vec4
        {
            [FieldOffset(0)] // size = 4
            public float x;

            [FieldOffset(4)] // size = 4
            public float y;

            [FieldOffset(8)] // size = 4
            public float z;

            [FieldOffset(12)] // size = 4
            public float w;
        }

        // Struct @ FNA3D.h:406:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct FNA3D_VertexElement
        {
            [FieldOffset(0)] // size = 4
            public int offset;

            [FieldOffset(4)] // size = 4
            public FNA3D_VertexElementFormat vertexElementFormat;

            [FieldOffset(8)] // size = 4
            public FNA3D_VertexElementUsage vertexElementUsage;

            [FieldOffset(12)] // size = 4
            public int usageIndex;
        }

        // Struct @ FNA3D.h:442:3
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct FNA3D_RenderTargetBinding_ANONYMOUS_FIELD1_ANONYMOUS_FIELD1
        {
            [FieldOffset(0)] // size = 4
            public int size;

            [FieldOffset(4)] // size = 4
            public FNA3D_CubeMapFace face;
        }

        // Struct @ FNA3D.h:349:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
        public struct FNA3D_BlendState
        {
            [FieldOffset(0)] // size = 4
            public FNA3D_Blend colorSourceBlend;

            [FieldOffset(4)] // size = 4
            public FNA3D_Blend colorDestinationBlend;

            [FieldOffset(8)] // size = 4
            public FNA3D_BlendFunction colorBlendFunction;

            [FieldOffset(12)] // size = 4
            public FNA3D_Blend alphaSourceBlend;

            [FieldOffset(16)] // size = 4
            public FNA3D_Blend alphaDestinationBlend;

            [FieldOffset(20)] // size = 4
            public FNA3D_BlendFunction alphaBlendFunction;

            [FieldOffset(24)] // size = 4
            public FNA3D_ColorWriteChannels colorWriteEnable;

            [FieldOffset(28)] // size = 4
            public FNA3D_ColorWriteChannels colorWriteEnable1;

            [FieldOffset(32)] // size = 4
            public FNA3D_ColorWriteChannels colorWriteEnable2;

            [FieldOffset(36)] // size = 4
            public FNA3D_ColorWriteChannels colorWriteEnable3;

            [FieldOffset(40)] // size = 4
            public FNA3D_Color blendFactor;

            [FieldOffset(44)] // size = 4
            public int multiSampleMask;
        }

        // Struct @ FNA3D.h:414:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct FNA3D_VertexDeclaration
        {
            [FieldOffset(0)] // size = 4
            public int vertexStride;

            [FieldOffset(4)] // size = 4
            public int elementCount;

            [FieldOffset(8)] // size = 8
            public FNA3D_VertexElement* elements;
        }

        // Struct @ FNA3D.h:421:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct FNA3D_VertexBufferBinding
        {
            [FieldOffset(0)] // size = 8
            public FNA3D_Buffer* vertexBuffer;

            [FieldOffset(8)] // size = 16
            public FNA3D_VertexDeclaration vertexDeclaration;

            [FieldOffset(24)] // size = 4
            public int vertexOffset;

            [FieldOffset(28)] // size = 4
            public int instanceFrequency;
        }

        // Struct @ FNA3D.h:309:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct FNA3D_Rect
        {
            [FieldOffset(0)] // size = 4
            public int x;

            [FieldOffset(4)] // size = 4
            public int y;

            [FieldOffset(8)] // size = 4
            public int w;

            [FieldOffset(12)] // size = 4
            public int h;
        }

        // Struct @ FNA3D.h:429:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct FNA3D_RenderTargetBinding
        {
            [FieldOffset(0)] // size = 1
            public byte type;

            [FieldOffset(0)] // size = 8
            public FNA3D_RenderTargetBinding_ANONYMOUS_FIELD1_ANONYMOUS_FIELD0 twod;

            [FieldOffset(0)] // size = 8
            public FNA3D_RenderTargetBinding_ANONYMOUS_FIELD1_ANONYMOUS_FIELD1 cube;

            [FieldOffset(12)] // size = 4
            public int levelCount;

            [FieldOffset(16)] // size = 4
            public int multiSampleCount;

            [FieldOffset(24)] // size = 8
            public FNA3D_Texture* texture;

            [FieldOffset(32)] // size = 8
            public FNA3D_Renderbuffer* colorBuffer;
        }

        // Struct @ FNA3D.h:335:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct FNA3D_PresentationParameters
        {
            [FieldOffset(0)] // size = 4
            public int backBufferWidth;

            [FieldOffset(4)] // size = 4
            public int backBufferHeight;

            [FieldOffset(8)] // size = 4
            public FNA3D_SurfaceFormat backBufferFormat;

            [FieldOffset(12)] // size = 4
            public int multiSampleCount;

            [FieldOffset(16)] // size = 8
            public void* deviceWindowHandle;

            [FieldOffset(24)] // size = 1
            public byte isFullScreen;

            [FieldOffset(28)] // size = 4
            public FNA3D_DepthFormat depthStencilFormat;

            [FieldOffset(32)] // size = 4
            public FNA3D_PresentInterval presentationInterval;

            [FieldOffset(36)] // size = 4
            public FNA3D_DisplayOrientation displayOrientation;

            [FieldOffset(40)] // size = 4
            public FNA3D_RenderTargetUsage renderTargetUsage;
        }

        // OpaqueType @ FNA3D.h:1326:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct MOJOSHADER_effect
        {
        }

        // OpaqueType @ FNA3D.h:1328:46
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct MOJOSHADER_effectStateChanges
        {
        }

        // OpaqueType @ FNA3D.h:58:35
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FNA3D_Renderbuffer
        {
        }

        // OpaqueType @ FNA3D.h:59:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FNA3D_Effect
        {
        }

        // OpaqueType @ FNA3D.h:55:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FNA3D_Device
        {
        }

        // OpaqueType @ FNA3D.h:1327:43
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct MOJOSHADER_effectTechnique
        {
        }

        // OpaqueType @ FNA3D.h:56:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FNA3D_Texture
        {
        }

        // OpaqueType @ FNA3D.h:60:28
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FNA3D_Query
        {
        }

        // OpaqueType @ FNA3D.h:57:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Sequential)]
        public struct FNA3D_Buffer
        {
        }

        // TypeAlias @ FNA3D.h:482:27
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct FNA3D_LogFunc
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_CString_Void Data;

            public static implicit operator FnPtr_CString_Void(FNA3D_LogFunc data) => data.Data;
            public static implicit operator FNA3D_LogFunc(FnPtr_CString_Void data) => new() { Data = data };
        }

        // TypeAlias @ FNA3D_Image.h:94:27
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct FNA3D_Image_WriteFunc
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_VoidPtr_Int_Void Data;

            public static implicit operator FnPtr_VoidPtr_VoidPtr_Int_Void(FNA3D_Image_WriteFunc data) => data.Data;
            public static implicit operator FNA3D_Image_WriteFunc(FnPtr_VoidPtr_VoidPtr_Int_Void data) => new() { Data = data };
        }

        // TypeAlias @ FNA3D_Image.h:46:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct FNA3D_Image_ReadFunc
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_CString_Int_Int Data;

            public static implicit operator FnPtr_VoidPtr_CString_Int_Int(FNA3D_Image_ReadFunc data) => data.Data;
            public static implicit operator FNA3D_Image_ReadFunc(FnPtr_VoidPtr_CString_Int_Int data) => new() { Data = data };
        }

        // TypeAlias @ FNA3D_Image.h:55:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct FNA3D_Image_EOFFunc
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_Int Data;

            public static implicit operator FnPtr_VoidPtr_Int(FNA3D_Image_EOFFunc data) => data.Data;
            public static implicit operator FNA3D_Image_EOFFunc(FnPtr_VoidPtr_Int data) => new() { Data = data };
        }

        // TypeAlias @ FNA3D_Image.h:51:27
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct FNA3D_Image_SkipFunc
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_Int_Void Data;

            public static implicit operator FnPtr_VoidPtr_Int_Void(FNA3D_Image_SkipFunc data) => data.Data;
            public static implicit operator FNA3D_Image_SkipFunc(FnPtr_VoidPtr_Int_Void data) => new() { Data = data };
        }

        // Enum @ FNA3D.h:84:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_RenderTargetUsage : int
        {
            FNA3D_RENDERTARGETUSAGE_DISCARDCONTENTS = 0,
            FNA3D_RENDERTARGETUSAGE_PRESERVECONTENTS = 1,
            FNA3D_RENDERTARGETUSAGE_PLATFORMCONTENTS = 2
        }

        // Enum @ FNA3D.h:166:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_SetDataOptions : int
        {
            FNA3D_SETDATAOPTIONS_NONE = 0,
            FNA3D_SETDATAOPTIONS_DISCARD = 1,
            FNA3D_SETDATAOPTIONS_NOOVERWRITE = 2
        }

        // Enum @ FNA3D.h:266:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_VertexElementFormat : int
        {
            FNA3D_VERTEXELEMENTFORMAT_SINGLE = 0,
            FNA3D_VERTEXELEMENTFORMAT_VECTOR2 = 1,
            FNA3D_VERTEXELEMENTFORMAT_VECTOR3 = 2,
            FNA3D_VERTEXELEMENTFORMAT_VECTOR4 = 3,
            FNA3D_VERTEXELEMENTFORMAT_COLOR = 4,
            FNA3D_VERTEXELEMENTFORMAT_BYTE4 = 5,
            FNA3D_VERTEXELEMENTFORMAT_SHORT2 = 6,
            FNA3D_VERTEXELEMENTFORMAT_SHORT4 = 7,
            FNA3D_VERTEXELEMENTFORMAT_NORMALIZEDSHORT2 = 8,
            FNA3D_VERTEXELEMENTFORMAT_NORMALIZEDSHORT4 = 9,
            FNA3D_VERTEXELEMENTFORMAT_HALFVECTOR2 = 10,
            FNA3D_VERTEXELEMENTFORMAT_HALFVECTOR4 = 11
        }

        // Enum @ FNA3D.h:91:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_ClearOptions : int
        {
            FNA3D_CLEAROPTIONS_TARGET = 1,
            FNA3D_CLEAROPTIONS_DEPTHBUFFER = 2,
            FNA3D_CLEAROPTIONS_STENCIL = 4
        }

        // Enum @ FNA3D.h:64:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_PresentInterval : int
        {
            FNA3D_PRESENTINTERVAL_DEFAULT = 0,
            FNA3D_PRESENTINTERVAL_ONE = 1,
            FNA3D_PRESENTINTERVAL_TWO = 2,
            FNA3D_PRESENTINTERVAL_IMMEDIATE = 3
        }

        // Enum @ FNA3D.h:160:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_BufferUsage : int
        {
            FNA3D_BUFFERUSAGE_NONE = 0,
            FNA3D_BUFFERUSAGE_WRITEONLY = 1
        }

        // Enum @ FNA3D.h:221:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_CompareFunction : int
        {
            FNA3D_COMPAREFUNCTION_ALWAYS = 0,
            FNA3D_COMPAREFUNCTION_NEVER = 1,
            FNA3D_COMPAREFUNCTION_LESS = 2,
            FNA3D_COMPAREFUNCTION_LESSEQUAL = 3,
            FNA3D_COMPAREFUNCTION_EQUAL = 4,
            FNA3D_COMPAREFUNCTION_GREATEREQUAL = 5,
            FNA3D_COMPAREFUNCTION_GREATER = 6,
            FNA3D_COMPAREFUNCTION_NOTEQUAL = 7
        }

        // Enum @ FNA3D.h:76:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_DisplayOrientation : int
        {
            FNA3D_DISPLAYORIENTATION_DEFAULT = 0,
            FNA3D_DISPLAYORIENTATION_LANDSCAPELEFT = 1,
            FNA3D_DISPLAYORIENTATION_LANDSCAPERIGHT = 2,
            FNA3D_DISPLAYORIENTATION_PORTRAIT = 3
        }

        // Enum @ FNA3D.h:150:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_CubeMapFace : int
        {
            FNA3D_CUBEMAPFACE_POSITIVEX = 0,
            FNA3D_CUBEMAPFACE_NEGATIVEX = 1,
            FNA3D_CUBEMAPFACE_POSITIVEY = 2,
            FNA3D_CUBEMAPFACE_NEGATIVEY = 3,
            FNA3D_CUBEMAPFACE_POSITIVEZ = 4,
            FNA3D_CUBEMAPFACE_NEGATIVEZ = 5
        }

        // Enum @ FNA3D.h:240:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_FillMode : int
        {
            FNA3D_FILLMODE_SOLID = 0,
            FNA3D_FILLMODE_WIREFRAME = 1
        }

        // Enum @ FNA3D.h:199:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_ColorWriteChannels : int
        {
            FNA3D_COLORWRITECHANNELS_NONE = 0,
            FNA3D_COLORWRITECHANNELS_RED = 1,
            FNA3D_COLORWRITECHANNELS_GREEN = 2,
            FNA3D_COLORWRITECHANNELS_BLUE = 4,
            FNA3D_COLORWRITECHANNELS_ALPHA = 8,
            FNA3D_COLORWRITECHANNELS_ALL = 15
        }

        // Enum @ FNA3D.h:142:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_DepthFormat : int
        {
            FNA3D_DEPTHFORMAT_NONE = 0,
            FNA3D_DEPTHFORMAT_D16 = 1,
            FNA3D_DEPTHFORMAT_D24 = 2,
            FNA3D_DEPTHFORMAT_D24S8 = 3
        }

        // Enum @ FNA3D.h:246:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_TextureAddressMode : int
        {
            FNA3D_TEXTUREADDRESSMODE_WRAP = 0,
            FNA3D_TEXTUREADDRESSMODE_CLAMP = 1,
            FNA3D_TEXTUREADDRESSMODE_MIRROR = 2
        }

        // Enum @ FNA3D.h:190:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_BlendFunction : int
        {
            FNA3D_BLENDFUNCTION_ADD = 0,
            FNA3D_BLENDFUNCTION_SUBTRACT = 1,
            FNA3D_BLENDFUNCTION_REVERSESUBTRACT = 2,
            FNA3D_BLENDFUNCTION_MAX = 3,
            FNA3D_BLENDFUNCTION_MIN = 4
        }

        // Enum @ FNA3D.h:233:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_CullMode : int
        {
            FNA3D_CULLMODE_NONE = 0,
            FNA3D_CULLMODE_CULLCLOCKWISEFACE = 1,
            FNA3D_CULLMODE_CULLCOUNTERCLOCKWISEFACE = 2
        }

        // Enum @ FNA3D.h:113:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_SurfaceFormat : int
        {
            FNA3D_SURFACEFORMAT_COLOR = 0,
            FNA3D_SURFACEFORMAT_BGR565 = 1,
            FNA3D_SURFACEFORMAT_BGRA5551 = 2,
            FNA3D_SURFACEFORMAT_BGRA4444 = 3,
            FNA3D_SURFACEFORMAT_DXT1 = 4,
            FNA3D_SURFACEFORMAT_DXT3 = 5,
            FNA3D_SURFACEFORMAT_DXT5 = 6,
            FNA3D_SURFACEFORMAT_NORMALIZEDBYTE2 = 7,
            FNA3D_SURFACEFORMAT_NORMALIZEDBYTE4 = 8,
            FNA3D_SURFACEFORMAT_RGBA1010102 = 9,
            FNA3D_SURFACEFORMAT_RG32 = 10,
            FNA3D_SURFACEFORMAT_RGBA64 = 11,
            FNA3D_SURFACEFORMAT_ALPHA8 = 12,
            FNA3D_SURFACEFORMAT_SINGLE = 13,
            FNA3D_SURFACEFORMAT_VECTOR2 = 14,
            FNA3D_SURFACEFORMAT_VECTOR4 = 15,
            FNA3D_SURFACEFORMAT_HALFSINGLE = 16,
            FNA3D_SURFACEFORMAT_HALFVECTOR2 = 17,
            FNA3D_SURFACEFORMAT_HALFVECTOR4 = 18,
            FNA3D_SURFACEFORMAT_HDRBLENDABLE = 19,
            FNA3D_SURFACEFORMAT_COLORBGRA_EXT = 20,
            FNA3D_SURFACEFORMAT_COLORSRGB_EXT = 21,
            FNA3D_SURFACEFORMAT_DXT5SRGB_EXT = 22,
            FNA3D_SURFACEFORMAT_BC7_EXT = 23,
            FNA3D_SURFACEFORMAT_BC7SRGB_EXT = 24
        }

        // Enum @ FNA3D.h:282:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_VertexElementUsage : int
        {
            FNA3D_VERTEXELEMENTUSAGE_POSITION = 0,
            FNA3D_VERTEXELEMENTUSAGE_COLOR = 1,
            FNA3D_VERTEXELEMENTUSAGE_TEXTURECOORDINATE = 2,
            FNA3D_VERTEXELEMENTUSAGE_NORMAL = 3,
            FNA3D_VERTEXELEMENTUSAGE_BINORMAL = 4,
            FNA3D_VERTEXELEMENTUSAGE_TANGENT = 5,
            FNA3D_VERTEXELEMENTUSAGE_BLENDINDICES = 6,
            FNA3D_VERTEXELEMENTUSAGE_BLENDWEIGHT = 7,
            FNA3D_VERTEXELEMENTUSAGE_DEPTH = 8,
            FNA3D_VERTEXELEMENTUSAGE_FOG = 9,
            FNA3D_VERTEXELEMENTUSAGE_POINTSIZE = 10,
            FNA3D_VERTEXELEMENTUSAGE_SAMPLE = 11,
            FNA3D_VERTEXELEMENTUSAGE_TESSELATEFACTOR = 12
        }

        // Enum @ FNA3D.h:173:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_Blend : int
        {
            FNA3D_BLEND_ONE = 0,
            FNA3D_BLEND_ZERO = 1,
            FNA3D_BLEND_SOURCECOLOR = 2,
            FNA3D_BLEND_INVERSESOURCECOLOR = 3,
            FNA3D_BLEND_SOURCEALPHA = 4,
            FNA3D_BLEND_INVERSESOURCEALPHA = 5,
            FNA3D_BLEND_DESTINATIONCOLOR = 6,
            FNA3D_BLEND_INVERSEDESTINATIONCOLOR = 7,
            FNA3D_BLEND_DESTINATIONALPHA = 8,
            FNA3D_BLEND_INVERSEDESTINATIONALPHA = 9,
            FNA3D_BLEND_BLENDFACTOR = 10,
            FNA3D_BLEND_INVERSEBLENDFACTOR = 11,
            FNA3D_BLEND_SOURCEALPHASATURATION = 12
        }

        // Enum @ FNA3D.h:253:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_TextureFilter : int
        {
            FNA3D_TEXTUREFILTER_LINEAR = 0,
            FNA3D_TEXTUREFILTER_POINT = 1,
            FNA3D_TEXTUREFILTER_ANISOTROPIC = 2,
            FNA3D_TEXTUREFILTER_LINEAR_MIPPOINT = 3,
            FNA3D_TEXTUREFILTER_POINT_MIPLINEAR = 4,
            FNA3D_TEXTUREFILTER_MINLINEAR_MAGPOINT_MIPLINEAR = 5,
            FNA3D_TEXTUREFILTER_MINLINEAR_MAGPOINT_MIPPOINT = 6,
            FNA3D_TEXTUREFILTER_MINPOINT_MAGLINEAR_MIPLINEAR = 7,
            FNA3D_TEXTUREFILTER_MINPOINT_MAGLINEAR_MIPPOINT = 8
        }

        // Enum @ FNA3D.h:107:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_IndexElementSize : int
        {
            FNA3D_INDEXELEMENTSIZE_16BIT = 0,
            FNA3D_INDEXELEMENTSIZE_32BIT = 1
        }

        // Enum @ FNA3D.h:98:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_PrimitiveType : int
        {
            FNA3D_PRIMITIVETYPE_TRIANGLELIST = 0,
            FNA3D_PRIMITIVETYPE_TRIANGLESTRIP = 1,
            FNA3D_PRIMITIVETYPE_LINELIST = 2,
            FNA3D_PRIMITIVETYPE_LINESTRIP = 3,
            FNA3D_PRIMITIVETYPE_POINTLIST_EXT = 4
        }

        // Enum @ FNA3D.h:209:14
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public enum FNA3D_StencilOperation : int
        {
            FNA3D_STENCILOPERATION_KEEP = 0,
            FNA3D_STENCILOPERATION_ZERO = 1,
            FNA3D_STENCILOPERATION_REPLACE = 2,
            FNA3D_STENCILOPERATION_INCREMENT = 3,
            FNA3D_STENCILOPERATION_DECREMENT = 4,
            FNA3D_STENCILOPERATION_INCREMENTSATURATION = 5,
            FNA3D_STENCILOPERATION_DECREMENTSATURATION = 6,
            FNA3D_STENCILOPERATION_INVERT = 7
        }

        // MacroObject @ FNA3D.h:432:10
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public const int FNA3D_RENDERTARGET_TYPE_2D = 0;

        // MacroObject @ FNA3D.h:466:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public const int FNA3D_MINOR_VERSION = 7;

        // MacroObject @ FNA3D.h:433:10
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public const int FNA3D_RENDERTARGET_TYPE_CUBE = 1;

        // MacroObject @ FNA3D.h:469:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public const int FNA3D_COMPILED_VERSION = 220700;

        // MacroObject @ FNA3D.h:465:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public const int FNA3D_MAJOR_VERSION = 22;

        // MacroObject @ FNA3D.h:467:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public const int FNA3D_PATCH_VERSION = 0;

        // MacroObject @ FNA3D.h:464:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        //	aarch64-unknown-linux-gnu
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        public const int FNA3D_ABI_VERSION = 0;

        #endregion

        #region Setup & Teardown

        public static void Setup()
        {
            PreCompile();
        }

        private static void PreCompile()
        {
            var methods = typeof(FNA3D).GetMethods(
                System.Reflection.BindingFlags.DeclaredOnly |
                System.Reflection.BindingFlags.NonPublic |
                System.Reflection.BindingFlags.Public |
                System.Reflection.BindingFlags.Instance |
                System.Reflection.BindingFlags.Static);

            foreach (var method in methods)
            {
                if (method.GetMethodBody() == null)
                {
                    RuntimeHelpers.PrepareMethod(method.MethodHandle);
                }
            }
        }

        public static void Teardown()
        {
        }

        #endregion

        #region Runtime

        public static class Runtime
        {

            /// <summary>
            ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
            ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
            ///     <c>true</c>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CBool : IEquatable<CBool>
            {
                private readonly byte _value;

                private CBool(bool value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static implicit operator CBool(bool value)
                {
                    return FromBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static CBool FromBoolean(bool value)
                {
                    return new CBool(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static implicit operator bool(CBool value)
                {
                    return ToBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static bool ToBoolean(CBool value)
                {
                    return Convert.ToBoolean(value._value);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToBoolean(this).ToString();
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CBool b && Equals(b);
                }

                /// <inheritdoc />
                public bool Equals(CBool other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CBool left, CBool right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CBool left, CBool right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CBool left, CBool right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
            ///     an unmanaged context.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
            {
                private readonly byte _value;

                private CChar(byte value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static implicit operator CChar(byte value)
                {
                    return FromByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static CChar FromByte(byte value)
                {
                    return new CChar(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static implicit operator byte(CChar value)
                {
                    return ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static byte ToByte(CChar value)
                {
                    return value._value;
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CChar value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(byte other)
                {
                    return _value == other;
                }

                /// <inheritdoc />
                public bool Equals(CChar other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CChar left, CChar right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CChar left, CChar right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CChar left, CChar right)
                {
                    return left._value == right._value;
                }
            }

#pragma warning disable CS1591

            /// <summary>
            ///     Utility methods for dealing with native C libraries.
            /// </summary>
            public static class CLibrary
            {
                /// <summary>
                ///     Loads a C shared library (`.dll`/`.dylib`/`.so`) into the application's memory space given the C
                ///     library's file name, partially qualified file path, or a fully qualified file path.
                /// </summary>
                /// <param name="name">The C library's file name, partially qualified file path, or a fully qualified file path.</param>
                /// <returns>A <see cref="IntPtr" /> handle if the C library was loaded; otherwise, a <see cref="IntPtr.Zero" /> handle.</returns>
                /// <remarks>
                ///     <para>
                ///         If the library was already loaded, calling <see cref="Load" /> returns the handle of the previous loaded
                ///         library and the reference count for the handle is incremented.
                ///     </para>
                ///     <para>You must call <see cref="Free" /> when finished using a handle of a dynamically loaded library.</para>
                /// </remarks>
                public static IntPtr Load(string name)
                {
                    if (IsLinux)
                    {
                        return libdl.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    if (IsWindows)
                    {
                        return Kernel32.LoadLibrary(name);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    return IntPtr.Zero;
                }

                /// <summary>
                ///     Unloads a C shared library from the application's memory space given the library's handle.
                /// </summary>
                /// <param name="handle">The library's handle previously created by calling <see cref="Load" />.</param>
                /// <remarks>
                ///     <para>
                ///         If the library was loaded multiple times, the reference count for the handle is decremented upon calling
                ///         <see cref="Free" /> and the library is not yet unloaded from memory.
                ///     </para>
                /// </remarks>
                public static void Free(IntPtr handle)
                {
                    if (IsLinux)
                    {
                        libdl.dlclose(handle);
                    }

                    if (IsWindows)
                    {
                        Kernel32.FreeLibrary(handle);
                    }

                    if (IsDarwin)
                    {
                        libSystem.dlclose(handle);
                    }
                }

                public static IntPtr GetExport(IntPtr handle, string symbolName)
                {
                    if (IsLinux)
                    {
                        return libdl.dlsym(handle, symbolName);
                    }

                    if (IsWindows)
                    {
                        return Kernel32.GetProcAddress(handle, symbolName);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlsym(handle, symbolName);
                    }

                    return IntPtr.Zero;
                }

                private static bool IsWindows
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsWindows();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
#else
            false;
#endif
                }

                private static bool IsDarwin
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsMacOS() || 
            OperatingSystem.IsMacCatalyst() ||
            OperatingSystem.IsIOS() || 
            OperatingSystem.IsTvOS() ||
            OperatingSystem.IsWatchOS();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
#else
            false;
#endif
                }

                private static bool IsLinux
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsLinux() ||
            OperatingSystem.IsFreeBSD() ||
            OperatingSystem.IsAndroid();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
#else
            false;
#endif
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class libdl
                {
                    private const string LibraryName = "libdl";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class libSystem
                {
                    private const string LibraryName = "libSystem";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class Kernel32
                {
                    private const string LibraryName = "kernel32";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    public static extern IntPtr LoadLibrary(string fileName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    public static extern IntPtr GetProcAddress(IntPtr module, string procName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
                    public static extern int FreeLibrary(IntPtr module);
                }
            }

            /// <summary>
            ///     A pointer value type of bytes that represent a string; the C type `char*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CString : IEquatable<CString>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CString(string s)
                {
                    _pointer = CStrings.CString(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromIntPtr(nint value)
                {
                    return new CString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString From(byte* value)
                {
                    return new CString((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CString value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CString value)
                {
                    return CStrings.String(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromString(string s)
                {
                    return CStrings.CString(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.String(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CString value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CString other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CString left, CString right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }
            }

            /// <summary>
            ///     Utility methods for interoperability with C style strings in C#.
            /// </summary>
            public static unsafe class CStrings
            {
                private static readonly Dictionary<uint, CString> StringHashesToPointers = new();
                private static readonly Dictionary<nint, string> PointersToStrings = new();
                private static readonly Dictionary<uint, CStringWide> StringHashesToPointersWide = new();
                private static readonly Dictionary<nint, string> PointersToStringsWide = new();

                /// <summary>
                ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string String(CString value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStrings.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointers.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStrings[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringAnsi(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointers.Add(hash, value);
                    PointersToStrings.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string StringWide(CStringWide value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStringsWide.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStringsWide[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringUni(pointer2._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointersWide.Add(hash, value);
                    PointersToStringsWide.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
                ///     <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CString CString(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointers.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalAnsi(str);
                    StringHashesToPointers.Add(hash, new CString(pointer));
                    PointersToStrings.Add(pointer, str);

                    return new CString(pointer);
                }

                /// <summary>
                ///     Converts a C string pointer (one dimensional byte array terminated by a
                ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CStringWide CStringWide(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalUni(str);
                    StringHashesToPointersWide.Add(hash, new CStringWide(pointer));
                    PointersToStringsWide.Add(pointer, str);

                    return new CStringWide(pointer);
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
                ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CString* CStringArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CString(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
                ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CStringWide(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Frees the memory for all previously allocated C strings and releases references to all <see cref="string" />
                ///     objects which happened during <see cref="String" />, <see cref="StringWide" />, <see cref="CString" />
                ///     or <see cref="CStringWide" />. Does <b>not</b> garbage collect.
                /// </summary>
                public static void FreeAllStrings()
                {
                    foreach (var (ptr, _) in PointersToStrings)
                    {
                        Marshal.FreeHGlobal(ptr);
                    }

                    // We can not guarantee that the application has not a strong reference the string since it was allocated,
                    //  so we have to let the GC take the wheel here. Thus, this method should NOT garbage collect; that's
                    //  on the responsibility of the application developer. The best we can do is just remove any and all strong
                    //  references we have here to the strings.

                    StringHashesToPointers.Clear();
                    PointersToStrings.Clear();
                }

                /// <summary>
                ///     Frees the memory for specific previously allocated C strings and releases associated references to
                ///     <see cref="string" /> objects which happened during <see cref="String" /> or
                ///     <see cref="CString" />. Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="pointers">The C string pointers.</param>
                /// <param name="count">The number of C string pointers.</param>
                public static void FreeCStrings(CString* pointers, int count)
                {
                    for (var i = 0; i < count; i++)
                    {
                        var ptr = pointers[i];
                        FreeCString(ptr);
                    }

                    Marshal.FreeHGlobal((IntPtr)pointers);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="String" /> or <see cref="CString" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCString(CString value)
                {
                    if (!PointersToStrings.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointers.Remove(hash);
                    PointersToStrings.Remove(value._pointer);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="StringWide" /> or <see cref="CStringWide" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCStringWide(CStringWide value)
                {
                    if (!PointersToStringsWide.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointersWide.Remove(hash);
                    PointersToStringsWide.Remove(value._pointer);
                }

                // djb2 is named after https://en.wikipedia.org/wiki/Daniel_J._Bernstein
                //  References:
                //  (1) https://stackoverflow.com/a/7666577/2171957
                //  (2) http://www.cse.yorku.ca/~oz/hash.html
                //  (3) https://groups.google.com/g/comp.lang.c/c/lSKWXiuNOAk/m/zstZ3SRhCjgJ
                private static uint Djb2(byte* str)
                {
                    uint hash = 5381;

                    unchecked
                    {
                        uint c;
                        while ((c = *str++) != 0)
                        {
                            hash = (hash << 5) + hash + c; // hash * 33 + c
                        }
                    }

                    return hash;
                }

                private static uint Djb2(string str)
                {
                    uint hash = 5381;

                    // ReSharper disable once ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator
                    foreach (var c in str)
                    {
                        hash = (hash << 5) + hash + c; // hash * 33 + c
                    }

                    return hash;
                }
            }

            /// <summary>
            ///     A pointer value type that represents a wide string; C type `wchar_t*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CStringWide : IEquatable<CStringWide>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CStringWide(string s)
                {
                    _pointer = CStrings.CStringWide(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromIntPtr(nint value)
                {
                    return new CStringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide From(byte* value)
                {
                    return new CStringWide((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CStringWide value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CStringWide value)
                {
                    return CStrings.StringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromString(string s)
                {
                    return CStrings.CStringWide(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.StringWide(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CStringWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CStringWide other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CStringWide left, CStringWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }
            }
        }

        #endregion
    }
}